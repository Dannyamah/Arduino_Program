
/////////////////////////////////////////////////////////////////////////////////////////////
//ESP8266 CODE
////////////////////////////////////////////////////////////////////////////////////////////

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <DMD2.h>
#include <EEPROM.h>

#include <SoftwareSerial.h>

#define MYPORT_TX 15
#define MYPORT_RX 13

EspSoftwareSerial::UART myPort;

SPIDMD dmd(1, 1);
int reset = 12;
int trig = 13;
// const char* ssid = "RIIPSONS ENGINEERING";
// const char* password = "RiipsonsWifi";
const char* ssid = "Phydisplay";
const char* password = "phydisplay";
// char dataArray[500] = {};
char eepromArray[500] = {};
String newValue = "";
String newVal = "";
int iniAddress = 5;
int add = 0;
int state = 0;
String input1 = "";
String payload;
int httpCode;
const char* input = "";
String api = "http://api.phy-elect-rsu.com/display_message.php";
String inputt = "";
// String moving = "";
// String staticc = "";
String staticc = "";
String moving = "";
int ind = 0, count = 0;


void setup() {
  pinMode(reset, OUTPUT);
  pinMode(trig, OUTPUT);
  digitalWrite(reset, LOW);
  Serial.begin(9600);
  myPort.begin(9600, SWSERIAL_8N1, MYPORT_RX, MYPORT_TX, false);
  EEPROM.begin(500);
  readSend();
  WiFi.begin(ssid, password);
  // Serial.println("Connecting");
  while (WiFi.status() != WL_CONNECTED && count < 20) {
    delay(500);
    // Serial.print(".");
    count++;
  }
  // Serial.println("");
  // Serial.print("Connected to WiFi network with IP Address: ");
  // Serial.println(WiFi.localIP());
  input1 = "1";
  // Seri
}

void loop() {
  getdata();
  serial();
  // delay(300);
  // Serial.println("payload");
  if (state == 1) {
    //eepromWrite();
  }
  // void eepromwrite();
}

void getdata() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;
    // api = "http://api.phy-elect-rsu.com/display_message.php";
    http.begin(client, api);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    String value = "2";
    String last = "";
    last = payload;
    String httpPostData = "input=" + value + "";
    httpCode = http.POST(httpPostData);
    payload = http.getString();
    payload.trim();
    // Serial.print("httpCode: ");
    // Serial.println(httpCode);

    if (httpCode == 200 && last != payload) {
      moving = payload.substring(0, payload.indexOf('*'));
      staticc = payload.substring(payload.indexOf('*') + 1);
      resetFun();
      delay(2000);
      // Serial.print("esp");
      Serial.println(moving);
      // Serial.println("pds");
      // myPort.print("esp");
      myPort.println(staticc);
      newValue = payload;
      eepromwrite();
      // myPort.println("pds");
      state = 1;
    }
    // int ind = payload.indexOf('*');
    // Serial.println(ind);
    // moving = payload.substring(0, ind);
    // staticc = payload.substring(ind+1);
    // Serial.print("Moving text ==>>  ");
    // Serial.println(moving);
    // Serial.print("Static message ==>>  ");
    // Serial.println(staticc);
    http.end();
  }
}

void serial() {
  if (Serial.available()) {
    while (Serial.available() > 0) {
      char inchar = Serial.read();
      if (inchar != '\n') {
        inputt += inchar;
      } else if (inchar == '\n') {
        inputt.trim();

        moving = inputt.substring(0, inputt.indexOf('*'));
        staticc = inputt.substring(inputt.indexOf('*') + 1);
        // Serial.print("static: ");
        // Serial.println(staticc);
        // Serial.print("moving: ");
        // Serial.println(moving);
        delay(1000);
        Serial.println(moving);
        // Serial.println("pds");
        // myPort.print("esp");
        myPort.println(staticc);
        newValue = inputt;
        eepromwrite();
        inputt = "";
        String scroll = "";
      }

      // Serial.print(inchar);
    }
  }
}

void resetFun() {
  digitalWrite(reset, HIGH);
  digitalWrite(trig, HIGH);
  delay(10);
  digitalWrite(reset, LOW);
  digitalWrite(trig, LOW);
}


void readSend() {
  eepromread();
  moving = newVal.substring(0, newVal.indexOf('*'));
  staticc = newVal.substring(newVal.indexOf('*') + 1);
  resetFun();
  delay(2000);
  // Serial.print("esp");
  Serial.println(moving);
  // Serial.println("pds");
  // myPort.print("esp");
  myPort.println(staticc);
  delay(1000);
  myPort.println(staticc);
  // myPort.println("pds");
  state = 1;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//SCROLLING ATMEGA328 CODE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SPI.h>       //SPI.h must be included as DMD is written by SPI (the IDE complains otherwise)
#include <DMD.h>       //
#include <TimerOne.h>  //
#include "SystemFont5x7.h"
#include "Arial_black_16.h"

//Fire up the DMD library as dmd
#define DISPLAYS_ACROSS 4
#define DISPLAYS_DOWN 2
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

void ScanDMD() {
  dmd.scanDisplayBySPI();
}



String staticc = "";
String moving = "";
String input;
int len;
int movingIndex;


void setup() {
  Timer1.initialize(5000);  //period in microseconds to call ScanDMD. Anything longer than 5000 (5ms) and you can see flicker.
  Timer1.attachInterrupt(ScanDMD);

  dmd.clearScreen(true);
  Serial.begin(9600);
}

void loop(void) {
  // Serial.begin(9600);
  serialEvent();
  dmd.drawMarquee("Scrolling Text", 14, (32 * DISPLAYS_ACROSS) - 1, 0);
  long start = millis();
  long timer = start;
  boolean ret = false;
  // while (!ret) {
  //Serial.println("this");
  if ((timer + 30) < millis()) {
    ret = dmd.stepMarquee(-1, 0);
    timer = millis();
    //  }
  }
  //  Serial.end();
}

void serialEvent() {
  //  Serial.begin(9600);
  delay(10);
  if (Serial.available()) {
    Serial.println("thisss");
    // String data = Serial.readStringUntil('\n');
    input = Serial.readStringUntil('\n');
    //   if (data.length() > 1) {
    // input = data;
    //   }
    input.trim();
    if (input.startsWith("esp") && input.endsWith("pds")) {
      Serial.print("checked: ");
      Serial.println(input);
      len = input.length();
      Serial.println(len);
      int ind = input.indexOf('*');
      moving = input.substring(3, ind);
      staticc = input.substring(ind + 1, input.length() - 3);
      movingIndex = moving.length();
      Serial.print("moving: ");
      Serial.println(moving);
      Serial.println(staticc);
      input = "";
    }
    Serial.flush();
  }
  //
  //Serial.end();
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////
//STATIC CODE
/////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SPI.h>       //SPI.h must be included as DMD is written by SPI (the IDE complains otherwise)
#include <DMD.h>       //
#include <TimerOne.h>  //
#include "SystemFont5x7.h"
#include "Arial_black_16.h"
#include "Arial_14.h"
#include "RTClib.h"

RTC_DS3231 rtc;
#define DISPLAYS_ACROSS 4
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

int indexg = (32 * DISPLAYS_ACROSS) - 1;

void ScanDMD() {
  dmd.scanDisplayBySPI();
}

int intpin = 3;
String inputString = "";  // a String to hold incoming data
bool stringComplete = false;
String moving;
int len;
int movingIndex;
long lasttime = 0, currenttime = 0;

void setup() {
  Timer1.initialize(5000);  //period in microseconds to call ScanDMD. Anything longer than 5000 (5ms) and you can see flicker.
  Timer1.attachInterrupt(ScanDMD);
  pinMode(intpin, INPUT);
  Serial.begin(9600);
  rtc.begin();
  moving.reserve(500);

  if (rtc.lostPower()) {
    // Serial.println("RTC lost power, let's set the time!");
    // rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
  // dmd.drawBox(0, 0, 45, 16, GRAPHICS_NORMAL);
}
long time = 66;
String hr = "";
String min = "";

void loop(void) {
  delay(20);
  DateTime now = rtc.now();
  dmd.selectFont(Arial_Black_16);
  int timehr = now.hour();
  int timemin = now.minute();

  if (timehr > 12) {
    timehr = timehr - 12;
  }
  if (timehr < 10) {
    hr = "0" + (String)timehr;
  } else hr = (String)timehr;
  if (timemin < 10) {
    min = "0" + (String)timemin;
  } else min = (String)timemin;
  int bx;
  dmd.drawLine(0, 0, 0, 15, GRAPHICS_NORMAL);
  if (min.toInt() < 20) {
    bx = 40;
  } else bx = 43;
  dmd.drawLine(bx, 0, bx, 15, GRAPHICS_NORMAL);
  dmd.drawString(2, 1, hr.c_str(), 2, GRAPHICS_NORMAL);
  currenttime = millis();
  dmd.selectFont(SystemFont5x7);
  if (currenttime - lasttime <= 500) {
    dmd.drawChar(19, 4, ':', GRAPHICS_NORMAL);
  } else if (currenttime - lasttime >= 500) {
    dmd.drawChar(19, 4, ' ', GRAPHICS_NORMAL);
  }
  if (currenttime - lasttime >= 1000) {
    lasttime = currenttime;
  }

  dmd.selectFont(Arial_Black_16);
  dmd.drawString(23, 1, min.c_str(), min.length(), GRAPHICS_NORMAL);
  dmd.selectFont(SystemFont5x7);

  dmd.drawString(47, 4, moving.c_str(), moving.length(), GRAPHICS_NORMAL);
  Serial.println(moving);
}

void serialEvent() {
  while (Serial.available()) {
    char inChar = (char)Serial.read();
    inputString += inChar;
    if (inChar == '\n') {
      inputString.trim();
      Serial.println(inputString);
      Serial.println("this");
      dmd.clearScreen(true);
      moving = inputString;
      inputString = "";
    }
  }
}

